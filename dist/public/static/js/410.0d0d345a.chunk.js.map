{"version":3,"file":"static/js/410.0d0d345a.chunk.js","mappings":"yNAEaA,EAA2BC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,UAGrCC,EAAgBJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,U,SCmCvC,EA5ByE,SAAHG,GAAsB,IAAhBC,EAAQD,EAARC,SAElEC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAwC,SAAAC,GAAK,OAAIA,EAAMF,QAAQ,IACxEG,GAASF,EAAAA,EAAAA,KAAoC,SAAAC,GAAK,OAAIA,EAAME,IAAI,IAAhED,KAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACe,IAADC,EAAfN,EAASO,MAGVC,MAAM,mBACNC,QAAQC,IAAI,aAAcV,IAH1BF,GAASa,EAAAA,EAAAA,IAAiB,CAAEC,UAA0B,QAAjBN,EAAM,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMS,iBAAS,IAAAN,EAAAA,EAAI,KAKlE,GAAG,CAACN,EAASO,QAEbF,EAAAA,EAAAA,YAAU,WACFL,EAASa,UACTL,MAAM,kCAADM,OAAmCd,EAASa,UAEzD,GAAG,CAACb,EAASa,YAGTE,EAAAA,EAAAA,KAAC1B,EAAwB,CAAAQ,UACrBkB,EAAAA,EAAAA,KAACrB,EAAa,CAAAG,SAAEA,KAG5B,ECdA,EAbsD,SAAHD,GAAsB,IAAhBC,EAAQD,EAARC,SAE7CM,GAASF,EAAAA,EAAAA,KAAoC,SAAAC,GAAK,OAAIA,EAAME,IAAI,IAAhED,KAER,OAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMa,QACLC,EAAAA,IACMF,EAAAA,EAAAA,KAACG,EAAuB,CAACrB,SAAUA,IAEnC,IAGnB,C","sources":["layouts/DashboardLayout/Style.ts","layouts/DashboardLayout/CustomerDashboardLayout.tsx","layouts/DashboardLayout/HODashboardLayout.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DashboardLayoutContainer = styled.div`\n`\n\nexport const DashboardBody = styled.div`\n`","import React, { ReactNode, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { IAuthState } from '../../stateManagement/reducers/authReducer';\nimport { ICustomerState, tryFetchCustomer } from '../../stateManagement/reducers/customerReducer';\nimport { IRootState } from '../../stateManagement/store';\nimport { DashboardBody, DashboardLayoutContainer } from \"./Style\";\n\ninterface ICustomerDashboardLayoutProps {\n    children: ReactNode\n}\n\nconst CustomerDashboardLayout: React.FC<ICustomerDashboardLayoutProps> = ({ children }) => {\n\n    const dispatch = useDispatch<any>();\n    const customer = useSelector<IRootState, ICustomerState>(state => state.customer);\n    const { user } = useSelector<IRootState, IAuthState>(state => state.auth);\n\n    useEffect(() => {\n        if (!customer.data) {\n            dispatch(tryFetchCustomer({ authToken: user?.authToken ?? '' }));\n        } else {\n            alert('customer gotten');\n            console.log('Customer: ', customer);\n        }\n    }, [customer.data]);\n\n    useEffect(() => {\n        if (customer.fetchErr) {\n            alert(`Could not fetch customer-info: ${customer.fetchErr}`);\n        }\n    }, [customer.fetchErr]);\n\n    return (\n        <DashboardLayoutContainer>\n            <DashboardBody>{children}</DashboardBody>\n        </DashboardLayoutContainer>\n    );\n}\n\nexport default CustomerDashboardLayout;","import React, { ReactNode } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CUSTOMER } from \"../../config/constants\";\nimport { IAuthState } from \"../../stateManagement/reducers/authReducer\";\nimport { IRootState } from \"../../stateManagement/store\";\nimport CustomerDashboardLayout from \"./CustomerDashboardLayout\";\n\ninterface IHODashboardProps {\n    children: ReactNode\n}\n\nconst HODasboardLayout: React.FC<IHODashboardProps> = ({ children }) => {\n\n    const { user } = useSelector<IRootState, IAuthState>(state => state.auth);\n\n    switch (user?.role) {\n        case CUSTOMER:\n            return <CustomerDashboardLayout children={children} />\n        default:\n            return null;\n    }\n\n}\n\nexport default HODasboardLayout;"],"names":["DashboardLayoutContainer","styled","div","_templateObject","_taggedTemplateLiteral","DashboardBody","_templateObject2","_ref","children","dispatch","useDispatch","customer","useSelector","state","user","auth","useEffect","_user$authToken","data","alert","console","log","tryFetchCustomer","authToken","fetchErr","concat","_jsx","role","CUSTOMER","CustomerDashboardLayout"],"sourceRoot":""}