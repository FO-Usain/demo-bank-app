"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const express_validator_1 = require("express-validator");
const constants_1 = require("../config/constants");
const customersController_1 = __importDefault(require("../controllers/customersController"));
const transactionsController_1 = __importDefault(require("../controllers/transactionsController"));
const customerExists_1 = __importDefault(require("../expressValidators/customerExists"));
const isPositiveNumber_1 = __importDefault(require("../expressValidators/isPositiveNumber"));
const mkMatchesAnOption_1 = __importDefault(require("../expressValidators/mkMatchesAnOption"));
const transactionPeerExists_1 = __importDefault(require("../expressValidators/transactionPeerExists"));
const amountIsInLimit_1 = __importDefault(require("../middlewares/amountIsInLimit"));
const auth_1 = require("../middlewares/auth");
const handleValidationErrs_1 = __importDefault(require("../middlewares/handleValidationErrs"));
const stopKilledAuthenticatedCustomer_1 = __importDefault(require("../middlewares/stopKilledAuthenticatedCustomer"));
var asyncHandle = require('express-async-handler');
const transactionsRouter = (0, express_1.Router)();
const validateCustomerId = (0, express_validator_1.body)('customerId').notEmpty().withMessage('This field is required.').bail().custom(asyncHandle((0, customerExists_1.default)('_id'))).bail();
const validateType = (0, express_validator_1.body)('type').notEmpty().withMessage('This field is required.').bail().custom((0, mkMatchesAnOption_1.default)(constants_1.TRANSACTION_TYPES)).bail();
const validateAmount = (0, express_validator_1.body)('amount').notEmpty().withMessage('This field is required.').bail().custom(isPositiveNumber_1.default).bail();
const validateRemarks = (0, express_validator_1.body)('remarks').optional({ values: 'falsy' }).bail();
const validateDate = (0, express_validator_1.body)('date').notEmpty().withMessage('This field is required.').bail().isISO8601().toDate().withMessage('A date is expected.').bail();
const validatePeerId = (0, express_validator_1.body)('peerId').notEmpty().withMessage('This field is required.').bail().custom(asyncHandle((0, transactionPeerExists_1.default)('_id')));
const validatePin = (0, express_validator_1.body)('pin').notEmpty().withMessage('This field is required.').bail();
transactionsRouter.post('/transaction', asyncHandle(auth_1.isAuthenticated), asyncHandle((0, auth_1.mkPlaysRole)(constants_1.ADMIN)), validateCustomerId, validateType, validateAmount, validateRemarks, validateDate, validatePeerId, handleValidationErrs_1.default, asyncHandle(transactionsController_1.default.registerTransaction));
transactionsRouter.post('/transfer', asyncHandle(auth_1.isAuthenticated), asyncHandle((0, auth_1.mkPlaysRole)(constants_1.CUSTOMER)), asyncHandle(stopKilledAuthenticatedCustomer_1.default), validateCustomerId, validateAmount, validatePin, handleValidationErrs_1.default, asyncHandle(amountIsInLimit_1.default), asyncHandle(auth_1.pinIsForAuthenticatedUser), asyncHandle(customersController_1.default.mkTransfer));
transactionsRouter.get('/transactions', asyncHandle(auth_1.isAuthenticated), asyncHandle((0, auth_1.mkPlaysRole)(constants_1.CUSTOMER)), asyncHandle(customersController_1.default.getTransactions));
exports.default = transactionsRouter;
